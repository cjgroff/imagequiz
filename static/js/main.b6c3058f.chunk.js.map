{"version":3,"sources":["logo.svg","components/Images.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Images","props","flowers","Flower","images","i","this","length","push","name","src","picture","React","Component","pictureName","Home","login","setState","showLoginForm","state","for","type","placeholder","required","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,0ICErCC,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,QAAU,CACX,IAAIC,EAAO,WAAY,gBACvB,IAAIA,EAAO,iBAAkB,qBAC7B,IAAIA,EAAO,OAAQ,YACnB,IAAIA,EAAO,QAAS,aACpB,IAAIA,EAAO,YAAa,iBACxB,IAAIA,EAAO,QAAS,aACpB,IAAIA,EAAO,OAAQ,YACnB,IAAIA,EAAO,aAAc,kBAXf,E,qDAoBV,IADA,IAAMC,EAAS,GACNC,EAAI,EAAIA,EAAIC,KAAKJ,QAAQK,OAAQF,IAEtCD,EAAOI,KAAK,6BACPF,KAAKJ,QAAQG,GAAGI,KACjB,6BACA,yBAAKC,IAAK,mBAAmBJ,KAAKJ,QAAQG,GAAGM,YAGrD,OACI,2CAEKP,O,GAhCAQ,IAAMC,WA2CrBV,EACF,WAAYM,EAAMK,GAAc,oBAC5BR,KAAKG,KAAOA,EACZH,KAAKK,QAAUG,GAMRd,ICVAe,E,kDAvCX,WAAYd,GAAO,IAAD,8BACd,cAAMA,IAOVe,MAAQ,WACJ,EAAKC,SAAS,CAACC,eAAe,KAN9B,EAAKC,MAAQ,CAACD,eAAe,GAHf,E,qDAYd,OAAIZ,KAAKa,MAAMD,cAEP,0CAEI,6BACA,2BAAOE,IAAI,SAAQ,wCACnB,2BAAOC,KAAK,OAAOC,YAAY,iBAAiBb,KAAK,QAAQc,UAAQ,IACrE,6BACA,2BAAOH,IAAI,OAAM,wCACjB,2BAAOC,KAAK,WAAWC,YAAY,iBAAiBb,KAAK,MAAMc,UAAQ,IACvE,6BACA,4BAAQF,KAAK,SAASG,QAASlB,KAAKU,OAApC,UAMJ,6BACI,kBAAC,EAAD,W,GA/BDJ,IAAMC,WCYVY,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b6c3058f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Images extends React.Component{\n    constructor(props){\n        super(props)\n        //console.log(\"Home ctor,props\",props)\n        this.flowers = [\n            new Flower('Daffodil', 'daffodil.png'),\n            new Flower('Cherry blossom', 'cherryblossom.png'),\n            new Flower('Lily', 'lily.jpg'),\n            new Flower('Daisy', 'daisy.jpg'),\n            new Flower('Sunflower', 'sunflower.png'),\n            new Flower('Tulip', 'tulip.png'),\n            new Flower('Rose', 'rose.png'),\n            new Flower('Water lily', 'waterlily.png'),\n        ]\n        \n    \n\n    }\n    \n    render(){\n            const images = []\n            for (let i = 0 ; i < this.flowers.length; i++)\n            {\n                images.push(<div>\n                    {this.flowers[i].name}\n                    <br/>\n                    <img src={'imagequiz/image/'+this.flowers[i].picture}/>\n                </div>)\n            }\n            return (\n                <div>\n                    Images Page\n                    {images}\n                </div>\n            )\n            \n           /*\n          return (\n               <img src = \"imagequiz/image/cherryblossom.png\"/>\n           )\n           */\n    }\n}\nclass Flower {\n    constructor(name, pictureName) {\n        this.name = name;\n        this.picture = pictureName;\n    }\n}\n\n\n\nexport default Images;\n","import React from 'react';\nimport Images from './Images';\n\n\nclass Home extends React.Component{\n    constructor(props){\n        super(props)\n        //console.log(\"Home ctor,props\",props)\n        this.state = {showLoginForm: true}\n    \n\n    }\n    \n    login = ()=>{\n        this.setState({showLoginForm: false}) \n    }\n    render(){\n        if (this.state.showLoginForm){\n            return (\n                <div>\n                    Login Page\n                    <br/>\n                    <label for=\"uname\"><b>Username</b></label>\n                    <input type=\"text\" placeholder=\"Enter Username\" name=\"uname\" required/>\n                    <br/>\n                    <label for=\"psw\"><b>Password</b></label>\n                    <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" required/>\n                    <br/>\n                    <button type=\"submit\" onClick={this.login}  >Login</button>\n                </div>\n            )\n        }\n        else{\n            return(\n                <div>\n                    <Images />\n                </div>\n            )\n        }\n\n    }\n}\n\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n\n     \n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}