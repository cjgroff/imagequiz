{"version":3,"sources":["logo.svg","components/Quizzes.js","components/Quiz.js","components/Imagesquiz.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","quizzes","Quiz","props","clickchoice","event","quiz","state","questionnumber","currentTarget","innerText","setState","correct","repeat","location","quiznum","this","length","to","onClick","question","distractors","choices","i","push","src","process","React","Component","Imagesquiz","click","q","getAttribute","console","log","parseInt","from","pathname","images","Home","login","showLoginForm","username","user","className","Login","onSubmit","trim","authenticated","preventDefault","onInputChnage","value","target","name","type","onChange","App","basename","exact","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da463c7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var quizzes = [\n    ['Quiz1',\"daffodil.png\",\n        [\n            [\"apple.png\",[\"banana\",\"apple\",\"watermelon\",\"dog\"],\"apple\"],\n            [\"dog.jpeg\",[\"cat\",\"car\",\"whale\",\"dog\"],\"dog\"],\n            [\"cat.jpg\",[\"cat\",\"car\",\"whale\",\"dog\"],\"cat\"],\n            [\"car.jpeg\",[\"cat\",\"car\",\"whale\",\"dog\"],\"car\"],\n            [\"whale.jpg\",[\"cat\",\"car\",\"whale\",\"dog\"],\"whale\"],\n            [\"fish.jpeg\",[\"cat\",\"fish\",\"whale\",\"dog\"],\"fish\"],\n        ]],\n    ['Quiz2','cherryblossom.png',\n        [\n            [\"pie.jpeg\",[\"Banana\",\"pie\",\"watermelon\",\"dog\"],\"pie\"],\n            [\"pancakes.jpeg\",[\"cat\",\"pancakes\",\"whale\",\"dog\"],\"pancakes\"],\n            [\"cat.jpg\",[\"cat\",\"car\",\"whale\",\"dog\"],\"cat\"],\n            [\"car.jpeg\",[\"cat\",\"car\",\"whale\",\"dog\"],\"car\"],\n            [\"whale.jpg\",[\"cat\",\"car\",\"whale\",\"dog\"],\"whale\"],\n            [\"fish.jpeg\",[\"cat\",\"fish\",\"whale\",\"dog\"],\"fish\"],\n        ]],\n]\nexport default quizzes;","import React from 'react';\nimport {\n    useParams,\n    Link\n  } from \"react-router-dom\";\nimport quizzes from './Quizzes';\nimport Imagesquiz from './Imagesquiz';\n\n/*\nfunction Quiz (props){\n        let { id } = useParams()\n        console.log(\"Quiz ctor,props\",props,id)\n        return (\n            <div>This Quiz {id}</div>\n        )\n    }  \n*/\nclass Quiz extends React.Component{\n    constructor(props){\n        super(props)\n        //console.log(\"quiz ctor,props\",props)\n        //console.log(\"Quiz Number:\",props.location.state.quiznum)\n        this.state = {\n            quiz : quizzes[props.location.state.quiznum][2],\n            questionnumber : 0,\n            correct : 0\n        }\n    }\n    clickchoice = (event) => {\n        let quiz = this.state.quiz\n        let question = quiz[this.state.questionnumber]\n        let selected = event.currentTarget.innerText\n        let expect = quiz[this.state.questionnumber][2]\n        //console.log(\"select,answer\",selected,expect)\n        if (selected == expect){\n            this.setState({correct: this.state.correct + 1})\n            //console.log('correct')\n        }\n        this.setState({questionnumber : this.state.questionnumber + 1})\n    }\n    repeat = (event) => {\n        this.setState({questionnumber : 0,correct : 0})\n    }\n    render () { \n\n        let quiz = this.state.quiz\n        if (this.state.questionnumber == quiz.length){\n            return(\n            <div>Score : {this.state.correct} / {quiz.length}\n                <br/>\n                <Link to= {this.props.location}> </Link> \n                <div onClick= {this.repeat}>Repeat Quiz</div>\n                <br/>\n                <Link to= \"/imagesquiz\">New Quiz </Link> \n                \n            </div>   \n            )   \n        }\n        let question = quiz[this.state.questionnumber]\n        let distractors = question[1]\n        let choices  = []\n        for (let i = 0; i < distractors.length; i++){\n            choices.push(<div onClick = {this.clickchoice} >{distractors[i]}</div>)\n        }\n        \n        return(\n            <div>\n                \n                <img src={process.env.PUBLIC_URL + \"/image/\" + question[0]}/>\n                <br/>\n                Which word matches the image?\n                {choices}\n                <br/>\n                Correct {this.state.correct} / {quiz.length}\n                \n            </div>\n        )\n    }       \n}  \n\n    \n   \n\n\n\nexport default Quiz;\n","import React from 'react';\nimport Quiz from './Quiz';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams,\n    Redirect\n\n  } from \"react-router-dom\";\nimport quizzes from \"./Quizzes\";\n\nclass Imagesquiz extends React.Component{\n    constructor(props){\n        super(props)\n        console.log(\"Imagesquiz ctor,props\",props)\n        this.quizzes = quizzes\n        this.state = {quiznum : -1}\n    \n\n    }\n    click = (event) => {\n        let q = event.currentTarget.getAttribute(\"quiz\") //Is there a better way to get the quiz\n        console.log(\"click q \", q)\n        this.setState({quiznum : parseInt(q)}) \n    }\n    //How we planing redirect\n    render(){\n        if (this.state.quiznum != -1){\n            console.log(\"redirect to quiz\",this.state.quiznum)\n            let from = { pathname: '/quiz', state: { quiznum: this.state.quiznum } }\n            return(\n                <Redirect to={from} />\n            )\n        }\n        else{\n\n        const images = []\n            for (let i = 0 ; i < this.quizzes.length; i++)\n            {\n                images.push(<div onClick= {this.click} quiz = {i} >\n                    {this.quizzes[i][0]}\n                    <br/>\n                    <img src={process.env.PUBLIC_URL + \"/image/\" + this.quizzes[i][1]} />   \n                </div>)\n            }\n        \n            \n            return (\n                <div>   \n                    {images}  \n                </div>\n            )\n            \n        }\n    }\n}\n\n\n\n\nexport default Imagesquiz;\n","import React from 'react';\nimport Imagesquiz from './Imagesquiz';\nimport {\n    BrowserRouter,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nclass Home extends React.Component{\n    constructor(props){\n        super(props)\n        //console.log(\"Home ctor,props\",props)\n        this.state = {showLoginForm: true}\n    \n\n    }\n    \n    login = ()=>{\n        this.setState({showLoginForm: false}) \n    }\n    render(){\n        /*\n        if (this.state.showLoginForm){\n            return (\n                <div>\n                    Login Page\n                    <br/>\n                    <label for=\"uname\"><b>Username</b></label>\n                    <input type=\"text\" placeholder=\"Enter Username\" name=\"uname\" required/>\n                    <br/>\n                    <label for=\"psw\"><b>Password</b></label>\n                    <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" required/>\n                    <br/>\n                    <button type=\"submit\" onClick={this.login}  >Login</button>\n                </div>\n            )\n        }\n        */\n       let username = '';\n        const location = this.props.location;\n        if (location) {\n            console.log(location);\n            if (location.state) {\n                if (location.state.user) {\n                    username = location.state.user;\n                }\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"loginButton\">\n                    {username.length > 0 ? username\n                        : <Link to='/login'>Login</Link>}\n                </div>\n                <div>\n                    {username.length == 0 ?  \"Please Login\"\n                        :< Imagesquiz />}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Home;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            authenticated: false\n        };\n    }\n\n    onSubmit = (event) => {\n        if (this.state.username.trim().length > 0) {\n            this.setState({ authenticated: true });\n        }\n        event.preventDefault();\n    }\n\n    onInputChnage = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({ [name]: value });\n    }\n\n    render() {\n        let from = { pathname: '/', state: { user: this.state.username } };\n\n        if (this.state.authenticated) {\n            return (\n                <Redirect to={from} />\n            );\n\n        }\n\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <lable>Username:</lable>\n                    <input\n                        type=\"text\"\n                        name=\"username\"\n                        value={this.state.username}\n                        onChange={this.onInputChnage}\n                    ></input>\n                    <button type=\"submit\">Login</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Login from './components/Login';\nimport Quiz from './components/Quiz';\nimport Imagesquiz from './components/Imagesquiz';\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path='/' render={props => <Home {...props} />}/>\n        <Route path='/login' >\n          <Login />\n        </Route>\n        <Route path='/quiz' render={props => <Quiz {...props} />}/>\n        <Route path='/imagesquiz' render={props => <Imagesquiz {...props} />}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}